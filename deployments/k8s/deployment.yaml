apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-operator-controller
  namespace: websocket-system
  labels:
    app: websocket-operator-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: websocket-operator-controller
  template:
    metadata:
      labels:
        app: websocket-operator-controller
    spec:
      serviceAccountName: websocket-operator-controller
      containers:
      - name: controller
        image: docker.io/lukas8219/websocket-operator-controller:latest  # Update with your image tag
        imagePullPolicy: Always
        args:
        - --cert-dir=/etc/webhook/certs
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
        - name: tls-certs
          mountPath: /etc/webhook/certs/server.crt
          readOnly: true
          subPath: tls.crt
        - name: tls-certs
          mountPath: /etc/webhook/certs/server.key
          readOnly: true
          subPath: tls.key
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: tls-certs
        secret:
          secretName: webhook-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-operator-loadbalancer
  labels:
    app: websocket-operator-loadbalancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: websocket-operator-loadbalancer
  template:
    metadata:
      labels:
        app: websocket-operator-loadbalancer
    spec:
      serviceAccountName: loadbalancer-sa
      containers:
      - name: loadbalancer
        envFrom:
          - configMapRef:
              name: websocket-operator-config
        image: docker.io/lukas8219/websocket-operator-loadbalancer:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: websocket-operator-loadbalancer
  labels:
    app: websocket-operator-loadbalancer
spec:
  selector:
    app: websocket-operator-loadbalancer
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loadbalancer-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: endpoints-reader
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: loadbalancer-endpoints-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: endpoints-reader
subjects:
- kind: ServiceAccount
  name: loadbalancer-sa
  namespace: default

